<%--JSP注释--%>
<!--HTML注释-->
JSP注释不会被发送到客户端

JSP三个编译指令
1.page
2.include
3.taglib

使用编译指令的格式
<%@编译指令名 属性名 ="属性值"%>

getServiceInfo方法可以输出info的值

指定错误页面
1.通过errorPage指定错误页面
2.在错误页面用isErrorPage="true"指定这个是错误页面 isErrorPage默认值为false

手动建立web应用的步骤：
1.创建一个空的文件夹，文件夹的名字是web应用的名字
2.在文件夹下面建立一个WEB-INF文件夹
3.在WEB-INF文件夹下创建一个web.xml文件，内容如下
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  version="3.0"
  metadata-complete="true">

</web-app>
4.同时在WEB-INF文件夹下创建clssses和lib目录，分别存放class文件和打包后的jar包


IDEA 创建的jsp转化为servlet类的存放路径为
C:\Users\zxy\.IntelliJIdea2017.2\system\tomcat\Unnamed_Light_JavaEE\work\Catalina\localhost\_\org\apache\jsp

5.动作指令
<jsp:forward page="jsp-result.jsp">
        <jsp:param name="name" value="lxn"/>
        <jsp:param name="age" value="12"/>
    </jsp:forward>
jsp:forward不会导致地址栏发生变化，请求参数，请求属性都不会丢失

6.静态导入和动态导入的区别
a.静态导入是把整个页面融合，动态导入是在Servlet中使用include方法引入，使用下面的代码导入
  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "index.jsp", out, false);
b.静态导入时被导入页面的编译指令会起作用，动态导入不起作用
c.动态导入可以增加额外的参数(传递参数到被导入的页面)

6.forward和include很相似，forward用目标页面代替原来页面，include把目标页面插入到原来页面

IntelliJ IDEA 的 .idea 目录加入.gitignore无效的解决方法
无效的原因是：对应的目录或者文件已经被git跟踪，此时再加入.gitignore后就无效了，

解决办法：
git rm -r --cached 文件夹或者文件名

7.JSP不允许引用默认包中的类，编译不通过，需要建立包名
8.JSP的内置对象
    application
    request
    response
    config
    exception
    out
    page
    session
    pageContext
    在Servlet的_jspService()方法中对这些对象进行初始化，我们写的JSP脚本相当于_jspService部分
9.不同内置对象的作用
application
    在整个Web应用的JSP,Servlet中共享数据
    访问Web应用的配置参数
10.编译Servlet需要把Tomcat目录lib下的servlet-api.jar添加到CLASSPATH环境变量，需要带上后面的.jar
11.手动部署web项目，然后放到tomcat的webapps目录下，当把Person生成的class文件放到WEB-INF下面的classes下时，
然后在jsp页面中使用Person类，会报下面的错误
org.apache.jasper.JasperException: Unable to compile class for JSP:

An error occurred at line: [14] in the generated java file: [D:\apache-tomcat-7.0.57-windows-x86\apache-tomcat-7.0.57\work\Catalina\localhost\webDemo\org\apache\jsp\web\a_jsp.java]
Only a type can be imported. tencent.Person resolves to a package

12.通过application对象获取Web配置参数的步骤
    在web.xml中
     <context-param>
            <param-name>driver</param-name>
            <param-value>com.mysql.jdbc.Driver</param-value>
        </context-param>
    然后在jsp中通过application.getInitParameter("参数名")获取参数

13.在JSP页面中config.getServletName获取的到的都是jsp
14.把jsp定义为Servlet,，需要在web.xml中配置 <jsp-file>/configTest2.jsp</jsp-file>，通过
config.getInitParameter用于获取配置参数，如果配置了JSP页面为Servlet，则只能通过配置的路径
访问，这样才能获取到参数，此时就不能用jsp页面的名称访问了

15.如果需要在JSP页面使用exception对象，则要指定当前页面的isErrorPage为true,否则会提示找不到对象
    异常的类型为<%=exception.getClass()%>
    异常的信息是<%=exception.getMessage()%>

16.使用out对象输出都可以用输出表达式<%=%>代替
17.pageContext
    方法  getAttribute
          setAttribute(String name,int scope)
          scope可以是下面四个值
          PageContext.PAGE_SCOPE
          PageContext.REQUEST_SCOPE
          PageContext.SESSION_SCOPE
          PageContext.APPLICATION_SCOPE
18.request对象
    表单域和请求参数的关系(有name属性的表单名才会生成请求参数)
    a:每个有name的表单域对应一个请求参数
    b:如果多个表单域有相同的name属性，则只生成一个请求参数，参数的值有多个
    c:表单的name属性指定请求参数名，value属性指定请求参数值
    d:如果某个表单域设置了disable="disable",则该表单域不生成请求参数

19. request.setCharacterEncoding(设置request编码采用的字符集

20.request还有两个方法用于设置和获取值
    setAttribute
    getAttribute
    当forward时，请求参数和值都不会丢失
21.使用request执行forward和include
      request.getRequestDispatcher("/index.jsp").forward();
      request.getRequestDispatcher("/index.jsp").forward();
    getRequestDispatcher中的路径必须以/开头

22.使用response对象可以重定向
 response.sendRedirect("form.jsp");

 forward和redirect比较
 a:请求次数
 b:请求参数是否会丢失
 c:地址栏的url是否改变

 23.使用Cookie必须设置生存期限，否则会随着浏览器的关闭而消失
 默认情况下，Cookie中不允许有中文，可以通过UrlEncode

 24.session
    代表一次会话，从客户端浏览器连接服务，到客户端与服务器断开连接
    session通常用于保存客户端的状态信息，这些信息要保存在服务器的硬盘上，所以要求
    session的属性值是可序列化的

25.JSP和Servlet的区别
    Servlet中没有内置对象，JSP有内置对象
    对于静态的html标签，Servlet必须用页面输出流输出

26.如果需要用注解来配置Tomcat启动时，Servlet初始化，需要配置loadOnStartup以及urlPatterns
@WebServlet(loadOnStartup = 1,urlPatterns = "/timerservlet")

27.访问servlet时，要去掉service方法的super.service(req, resp);，否则回报405错
 HTTP method GET is not supported by this URL

28.根据严格的MVC规范，客户的请求先发送到servlet,然后由servlet将请求forward到该jsp页面

29.JSP如果要自定义带属性的标签，要在tag标签下新增attribute节点,attribute节点中可以添加如下属性
    name            定义属性名称，每个标签的属性名称必须是唯一的
    required        属性是否是必须的
    rtexprvalue     在运行表达式时，标签属性是否有效
    type            定义标签的属性累心，默认String
    description     描述信息
    fragment        如果声明了该属性,属性值将被视为一个 JspFragment。
    属性需要有set方法，否则会报错

30.带标签体的标签
    可以在标签体内嵌入html代码或者jsp
31.动态属性的标签(可以随意指定标签属性的名称和个数)
    当前类实现DynamicAttributes类，重写setDynamicAttribute方法，

32.Filter
请求与响应处理的分界线是执行了FilterChain的doFilter方法

33.request.getServletPath,获得请求的servlet的path
request.getRequestURL,获取请求的url

34.多个Servlet中相同的代码，可以放到filter中先处理

35.Url Rewrite 可以把动态页面伪装成静态的html页面，使用下面的语句可以查看url rewrite的状态
http://localhost:8080/rewrite-status

36.Listener
    ServletContextListener：监听web应用的启动和关闭
    ServletContextAttributeListener:application内的对象被保存，替换，消除时触发
    ServletRequestListener：请求到达被初始化和请求销毁时触发
    HttpSessionListener:监听session的创建和销毁

37.Servlet 3.0对应与JSP2.2规范

38.JSP配置
            <jsp-config>
                <jsp-property-group>
                    <!--对哪些文件应用配置-->
                    <url-pattern>*.jsp</url-pattern>
                    <!--忽略表达式语言-->
                    <el-ignored>false</el-ignored>
                    <!--页面编码-->
                    <page-encoding>GBK</page-encoding>
                    <!--不允许使用Java脚本-->
                    <scripting-invalid>false</scripting-invalid>
                </jsp-property-group>
            </jsp-config>
39.表达式语言的格式
    ${expression}
    如果要正常输出$,要写成\$
